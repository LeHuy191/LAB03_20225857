Câu hỏi: Ngoài ra, để so sánh các mục trong giỏ hàng, thay vì sử dụng Comparator, chúng ta có thể sử dụng giao diện Comparable và ghi đè phương thức compareTo(). Bạn có thể tham khảo tài liệu Java để xem thông tin về giao diện này.
Giả sử chúng ta đang sử dụng phương pháp tiếp cận giao diện Comparable này.
- Lớp nào nên triển khai giao diện Comparable?
- Trong các lớp đó, bạn nên triển khai phương thức compareTo() như thế nào để phản ánh thứ tự mà chúng ta muốn?
- Chúng ta có thể có hai quy tắc sắp xếp của mục (theo tiêu đề rồi đến giá và theo giá rồi đến tiêu đề) nếu chúng ta sử dụng phương pháp tiếp cận giao diện Comparable này không?
- Giả sử DVD có quy tắc sắp xếp khác với các loại phương tiện khác, đó là theo tiêu đề, sau đó giảm dần độ dài, sau đó là giá. Bạn sẽ sửa đổi mã của mình như thế nào để cho phép điều này?

Trả lời: 
1) Lớp "Media"
2)Cách triển khai của tôi:
@Override
public int compareTo(Media other) {
    int titleComparison = this.getTitle().compareTo(other.getTitle());
    if (titleComparison != 0) {
        return titleComparison; 
    } else {
        return Double.compare(this.getCost(), other.getCost()); 
    }
}
3)Không vì giao điện Comparable giả định rằng chỉ có một thứ tự tự nhiên duy nhất cho các đối tượng so sánh 
4)Chúng ta có thể ghi đè phương thức compareTo trong lớp Disc để phản ánh quy tắc sắp xếp mới.
@Override
    public int compareTo(Media other) {
        if (other instanceof Disc) {
            Disc otherDVD = (Disc) other;
            int titleComparison = this.getTitle().compareTo(otherDVD.getTitle());
            if (titleComparison != 0) {
                // Compare by title
                return titleComparison;
            } else {
                int lengthComparison = Integer.compare(otherDVD.getLength(), this.getLength());
                if (lengthComparison != 0) {
                    return lengthComparison;
                } else {
                    // Compare by cost
                    return Double.compare(this.getCost(), otherDVD.getCost());
                }
            }
        } else {
            return super.compareTo(other);
        }
    }

